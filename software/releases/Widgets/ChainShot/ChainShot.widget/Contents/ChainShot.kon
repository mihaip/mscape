<?xml version="1.0" encoding="UTF-8"?><widget version=1.0>   <debug>off</debug>   <option>allowCustomObjectAttributes</option>   <!--       ChainShot Widget      Design/Code: Mihai Parparita/Mscape Software/mihai@mscape.com      Additional Art: Arlo Rose/Work That Mouse/arlo@workthatmouse.com    -->   	<window title="ChainShot">		<name>main_window</name>		<width>322</width>		<height>354</height>		<opacity>255</opacity>		<visible>0</visible>		<shadow>1</shadow>	</window>		<!-- about -->	<about-box>		<image>Resources/about.png</image>	</about-box>		<!-- UI -->	<image src="Resources/grabberleft.png" hOffset="0" vOffset="0" name="grabberLeft"/>	<image src="Resources/grabberstretch.png" hOffset="0" vOffset="0" name="grabberStretch"/>	<image src="Resources/grabberright.png" hOffset="0" vOffset="0" name="grabberRight"/>		<image src="Resources/border.png" hOffset="0" vOffset="17" name="borderLeft"/>	<image src="Resources/border.png" hOffset="0" vOffset="17" name="borderRight"/>		<image src="Resources/infoleft.png" hOffset="0" vOffset="0" name="infoLeft"/>	<image src="Resources/infostretch.png" hOffset="0" vOffset="0" name="infoStretch"/>	<image src="Resources/inforight.png" hOffset="0" vOffset="0" name="infoRight"/>		<text alignment="center" font="Verdana" color="#DCDCDC" name="messageText1" size="14" style="bold" onMouseUp="InitializeBoard();"/>	<text alignment="center" font="Verdana" color="#DCDCDC" name="messageText2" size="14" onMouseUp="InitializeBoard();"/>	<text alignment="center" font="Verdana" color="#DCDCDC" name="messageText3" size="14" onMouseUp="InitializeBoard();"/>	<text alignment="center" font="Verdana" color="#DCDCDC" name="messageText4" size="14" onMouseUp="InitializeBoard();"/>		<image src="Resources/restart.png" hOffset="0" vOffset="0" name="restart" onMouseUp="InitializeBoard();"/>	<image src="Resources/stats.png" hOffset="0" vOffset="0" name="stats" onMouseUp="ShowStats();"/>	<text alignment="right" font="Verdana" color="#BCBCBC" name="remainingText" size="10"/>		<!-- preferences -->	<preference name="difficultyPref">		<type>popup</type>		<title>Difficulty:</title>		<option>Easy (3 colors)</option>		<option>Average (4 colors)</option>		<option>Hard (5 colors)</option>		<defaultValue>Average (4 colors)</defaultValue>	</preference>		<preference name="sizePref">		<type>popup</type>		<title>Board Size:</title>		<option>Tiny (5 x 5)</option>		<option>Small (7 x 7)</option>		<option>Medium (10 x 10)</option>		<option>Large (15 x 15)</option>		<option>Huge (20 x 20)</option>		<defaultValue>Medium (10 x 10)</defaultValue>	</preference>		<preference name="easyStatsPref">		<type>text</type>		<hidden>1</hidden>		<defaultValue>--|--|--|--|--</defaultValue>	</preference>		<preference name="averageStatsPref">		<type>text</type>		<hidden>1</hidden>		<defaultValue>--|--|--|--|--</defaultValue>	</preference>		<preference name="hardStatsPref">		<type>text</type>		<hidden>1</hidden>		<defaultValue>--|--|--|--|--</defaultValue>	</preference>		<!-- code -->	<action trigger="onLoad">		// pseudo-constants		var kSquareWidth = 16;		var kSquareHeight = 16;		var kBoardX = 1;		var kBoardY = 17;		var kGrabberLeftWidth = 67;		var kGrabberRightWidth = 4;		var kInfoLeftWidth = 4;		var kInfoRightWidth = 4;				var kRestartX = 2;		var kRestartY = 2;				var kStatsX = 16;		var kStatsY = 2;				var kRemainingX = -2;		var kRemainingY = 13;		var kRemainingPrefix = "Left: ";				var kMessageTextOffset = 20;				var kEasyPrefName = "Easy (3 colors)";		var kAveragePrefName = "Average (4 colors)";		var kHardPrefName = "Hard (5 colors)";				var kTinyPrefName = "Tiny (5 x 5)";		var kSmallPrefName = "Small (7 x 7)";		var kMediumPrefName = "Medium (10 x 10)";		var kLargePrefName = "Large (15 x 15)";		var kHugePrefName = "Huge (20 x 20)";				var kEmptyColor = -1;				// general globals		var boardWidth = 10;		var boardHeight = 10;		var colorCount;		var clearedColumns;		var piecesLeft;		var done = false;		var frontZOrder = 0;				var board = new Array();				function UpdateStats()		{			var statsString, stats, size, message1, message2, message3, message4;						switch (preferences.difficultyPref.value)			{				case kEasyPrefName: statsString = preferences.easyStatsPref.value; break;				case kAveragePrefName: statsString = preferences.averageStatsPref.value; break;				case kHardPrefName: statsString = preferences.hardStatsPref.value; break;			}						switch (preferences.sizePref.value)			{				case kTinyPrefName: size = 0; break;				case kSmallPrefName: size = 1; break;				case kMediumPrefName: size = 2; break;				case kLargePrefName: size = 3; break;				case kHugePrefName: size = 4; break;			}						stats = statsString.split('|');						if (stats[size] == '--' || stats[size] > piecesLeft)			{				message1 = 'Congratulations!';				message2 = 'You have set';				message3 = 'a new best';				message4 = 'for this difficulty.';								stats[size] = piecesLeft;								statsString = '';								for (i=0; i &lt; 5; i++)					statsString += stats[i] + '|';									switch (preferences.difficultyPref.value)				{					case kEasyPrefName: preferences.easyStatsPref.value = statsString; break;					case kAveragePrefName: preferences.averageStatsPref.value = statsString; break;					case kHardPrefName: preferences.hardStatsPref.value = statsString; break;				}			}			else			{				message1 = 'Game Over';				message2 = 'You have';				message3 = 'run out of';				message4 = 'possible moves.';			}							messageText1.data = message1;			messageText2.data = message2;			messageText3.data = message3;			messageText4.data = message4;						messageText1.zOrder = messageText2.zOrder = messageText3.zOrder = messageText4.zOrder = frontZOrder;		}				function InsideBoard(x, y)		{			return (x &gt;= 0 && y &gt;= 0 && x &lt; boardWidth && y &lt; boardHeight);		}				function CountSameColorNeighbors(x, y)		{			var neighborsCount = 0,				ourColor = board[x + y * boardWidth].color;						if (InsideBoard(x + 1, y) && board[x + 1 + y * boardWidth].color == ourColor) neighborsCount += 1;			if (InsideBoard(x - 1, y) && board[x - 1 + y * boardWidth].color == ourColor) neighborsCount += 2;			if (InsideBoard(x, y + 1) && board[x + (y + 1) * boardWidth].color == ourColor) neighborsCount += 4;			if (InsideBoard(x, y - 1) && board[x + (y - 1) * boardWidth].color == ourColor) neighborsCount += 8;						return neighborsCount;		}				function FloodFill(x, y, fillColor, touchedColumns)		{			var i = x + y * boardWidth;						if (!InsideBoard(x, y) || board[i].color != fillColor)				return;							board[i].color = kEmptyColor;			board[i].src = 'Resources/empty.png';			touchedColumns[x]++;			piecesLeft--;						FloodFill(x + 1, y, fillColor, touchedColumns);			FloodFill(x - 1, y, fillColor, touchedColumns);			FloodFill(x, y + 1, fillColor, touchedColumns);			FloodFill(x, y - 1, fillColor, touchedColumns);		}				function FixUpColumn(x, emptyColumns)		{			var newColumn = new Array(boardHeight),				newColumnY = 0;						for (y = 0; y &lt; boardHeight; y++)				if (board[x + y * boardWidth].color != kEmptyColor)					newColumn[newColumnY++] = board[x + y * boardWidth].color;								for (y = 0; y &lt; newColumnY; y++)				if (board[x + y * boardWidth].color != newColumn[y])				{					board[x + y * boardWidth].color = newColumn[y];					board[x + y * boardWidth].src = 'Resources/color' + newColumn[y] + '.png';				}						for (; y &lt; boardHeight; y++)				if (board[x + y * boardWidth].color != kEmptyColor)				{					board[x + y * boardWidth].color = kEmptyColor;					board[x + y * boardWidth].src = 'Resources/empty.png';				}						if (newColumnY == 0)				emptyColumns[x] = 1;			else				emptyColumns[x] = 0;		}				function ClearColumn(x)		{			for (y = 0; y &lt; boardHeight; y++)			{				board[x + y * boardWidth].color = kEmptyColor;				board[x + y * boardWidth].src = 'Resources/empty.png';			}						clearedColumns[x] = true;		}				function CopyColumn(destX, srcX)		{			for (y = 0; y &lt; boardHeight; y++)				if (board[destX + y * boardWidth].color != board[srcX + y * boardWidth].color)				{					board[destX + y * boardWidth].color = board[srcX + y * boardWidth].color;					board[destX + y * boardWidth].src = board[srcX + y * boardWidth].src;				}		}				function HandleClick(x, y)		{			var i = x + y * boardWidth;						if (done)				InitializeBoard();			else if (board[i].color != kEmptyColor &&				CountSameColorNeighbors(x, y))			{				var touchedColumns = new Array(boardWidth),					emptyColumns = new Array(boardWidth),					newColumnSources = new Array(boardWidth),					newColumnX = 0,					copies = 0;									suppressUpdates();								var  start = new Date();								// initialize				for (j=0; j &lt; boardWidth; j++)					touchedColumns[j] = 0;								// flood fill				FloodFill(x, y, board[i].color, touchedColumns);								var floodFill = new Date();								// fix up stuff within columns				for (j=0; j &lt; boardWidth; j++)					if (touchedColumns[j])						FixUpColumn(j, emptyColumns);										var fixup = new Date();								// fix up entire columns				for (j=0; j &lt; boardWidth; j++)					if (!emptyColumns[j])						newColumnSources[newColumnX++] = j;								for (j=0; j &lt; newColumnX; j++)					if (j != newColumnSources[j])					{						CopyColumn(j, newColumnSources[j]);						copies++;					}										var copyColumn = new Date();									for (; j &lt; boardWidth; j++)					if (!clearedColumns[j])						ClearColumn(j);										var clearColumn = new Date();										if (NoMovesLeft())				{					UpdateStats();					done = true;				}									var nomoves = new Date();								remainingText.data = kRemainingPrefix + piecesLeft;									resumeUpdates();				main_window.recalcShadow();								var resume = new Date();								/* timing				print('floodfill: ' + (floodFill - start));				print('fixup: ' + (fixup - floodFill));				print('copy: ' + (copyColumn - fixup) + ' for ' + copies + ' copy ops');				print('clear: ' + (clearColumn - copyColumn));				print('nomovesleft: ' + (nomoves - clearColumn));				print('resume: ' + (resume - nomoves)); */			}		}				function NoMovesLeft()		{			var returnValue = true;						for (x = 0; x &lt; boardWidth; x++)				for (y=0; y &lt; boardHeight; y++)				if (board[x + y * boardWidth].color != kEmptyColor)				{					var color = board[x + y * boardWidth].color,						neighbors = CountSameColorNeighbors(x, y);										board[x + y * boardWidth].src = 'Resources/color' + color + '-' + neighbors + '.png';										if (neighbors)						returnValue = false;				}						return returnValue;		}				function InitializeBoard()		{			var i, fontSize, offset;						done = false;						// grab preferences			switch (preferences.difficultyPref.value)			{				case kEasyPrefName: colorCount = 3; break;				case kAveragePrefName: colorCount = 4; break;				case kHardPrefName: colorCount = 5; break;				default: alert('huh? difficulty is set to \"' + preferences.difficultyPref.value + '\"');				}						switch (preferences.sizePref.value)			{				case kTinyPrefName: boardWidth = boardHeight = 5; break;				case kSmallPrefName: boardWidth = boardHeight = 7; break;				case kMediumPrefName: boardWidth = boardHeight = 10; break;				case kLargePrefName: boardWidth = boardHeight = 15; break;				case kHugePrefName: boardWidth = boardHeight = 20; break;				default: alert('huh? size is set to \"' + preferences.sizePref.value + '\"');				}						// set up board			piecesLeft = boardWidth * boardHeight;			board = new Array(boardWidth * boardHeight);			clearedColumns = new Array(boardWidth);						suppressUpdates();						for (x=0; x &lt; boardWidth; x++)			{				for (y=0; y &lt; boardHeight; y++)				{					i = x + y * boardWidth;										board[i] = new Image();					board[i].color = random(1, colorCount + 1);					board[i].hOffset = kBoardX + x * kSquareWidth;					board[i].vOffset = kBoardY + (boardHeight - y - 1) * kSquareHeight;					board[i].src = 'Resources/color' + board[i].color + '.png';					board[i].onMouseUp = 'HandleClick(' + x + ',' + y + ');';				}								clearedColumns[x] = false;			}							// resize UI based on board dimensions			grabberStretch.hOffset = kGrabberLeftWidth;			grabberStretch.width = kSquareWidth * boardWidth + 2 - kGrabberLeftWidth - kGrabberRightWidth;			grabberStretch.height = kBoardY;			grabberRight.hOffset = kSquareWidth * boardWidth + 2 - kGrabberRightWidth;						borderRight.height = borderLeft.height = kSquareHeight * boardHeight;			borderRight.width = borderLeft.width = 1;			borderRight.hOffset = kSquareWidth * boardWidth + 1;						infoLeft.vOffset = infoStretch.vOffset = infoRight.vOffset = kBoardY + boardHeight * kSquareHeight;			infoStretch.hOffset = kInfoLeftWidth;			infoStretch.width = kSquareWidth * boardWidth + 2 - kInfoLeftWidth - kInfoRightWidth;			infoStretch.height = kBoardY;			infoRight.hOffset = kSquareWidth * boardWidth + 2 - kInfoRightWidth;						restart.vOffset = kBoardY + kSquareHeight * boardHeight + kRestartY;			restart.hOffset = kRestartX;						stats.vOffset = kBoardY + kSquareHeight * boardHeight + kStatsY;			stats.hOffset = kStatsX;						remainingText.hOffset = kSquareWidth * boardWidth + kRemainingX;			remainingText.vOffset = kBoardY + kSquareHeight * boardHeight + kRemainingY;			remainingText.data = kRemainingPrefix + piecesLeft;						switch (preferences.sizePref.value)			{				case kTinyPrefName: fontSize = 9; offset = 10; break;				case kSmallPrefName: fontSize = 10; offset = 12; break;				case kMediumPrefName: fontSize = 13; offset = 16; break;				case kLargePrefName: fontSize = 16; offset = 19; break;				case kHugePrefName: fontSize = 18; offset = 22; break;			}						messageText1.size = messageText2.size = messageText3.size = messageText4.size = fontSize;			frontZOrder += 400;			messageText1.zOrder = messageText2.zOrder = messageText3.zOrder = messageText4.zOrder = 0;						messageText1.hOffset = kSquareWidth * boardWidth / 2;			messageText1.vOffset = kSquareHeight * boardHeight / 2;			messageText1.data = '';						messageText2.hOffset = kSquareWidth * boardWidth / 2;			messageText2.vOffset = kSquareHeight * boardHeight / 2 + offset;			messageText2.data = '';						messageText3.hOffset = kSquareWidth * boardWidth / 2;			messageText3.vOffset = kSquareHeight * boardHeight / 2 + 2 * offset;			messageText3.data = '';						messageText4.hOffset = kSquareWidth * boardWidth / 2;			messageText4.vOffset = kSquareHeight * boardHeight / 2 + 3 * offset;			messageText4.data = '';						NoMovesLeft();						resumeUpdates();			main_window.recalcShadow();		}				function ShowStats()		{			var easyStats = preferences.easyStatsPref.value.split('|'),				averageStats = preferences.averageStatsPref.value.split('|'),				hardStats = preferences.hardStatsPref.value.split('|')						alert('Stats\n\n' +				  'Easy:\n' +				  '	' + easyStats[0] + '/' + easyStats[1] + '/' + easyStats[2] + '/' + easyStats[3] + '/' + easyStats[4] + '\n' +				  'Average:\n' +				  '	' + averageStats[0] + '/' + averageStats[1] + '/' + averageStats[2] + '/' + averageStats[3] + '/' + averageStats[4] + '\n' +				  'Hard:\n' +				  '	' + hardStats[0] + '/' + hardStats[1] + '/' + hardStats[2] + '/' + hardStats[3] + '/' + hardStats[4]);		}						InitializeBoard();				main_window.visible = true;		</action></widget>