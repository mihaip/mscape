Conclusion	The program obviously achieved its goal, since it is possible to create a new icon or open an existing one, edit it, and save the result. In terms of the features implemented in the program I went above my original expectations. For example I had initially thought that I should do an undo feature, but I was not too sure I could manage a multiple undo one (although in theory it was rather simple to do, as shown in the algorithmic representation). I also learned how to integrate Mac OS technologies which I had no previous experience with.	Improvements to this program can be made both from the user's point of view as well as from a back-end, programming viewpoint.	The user would most likely benefit from additional tools. A gradient tool (which draws a smooth transition between two differntly colored points) is particulary appropriate, since the 32 bit icon format allows for many more shades of colors than the old 8 bit one. Additional tools could be a ellipse/circle tool (this one would be a simple reworking of the rectangle tool, with the calls to FrameRect replaced with FrameOval. Other possible tools include a polygon tool (in which the user could set the points of a polygon, and then have lines connectign them in the order specified) and a text tool (a possible implementation of this would be to allow the user to type the chosen text into a dialog, and then have the result be placed into a floating selection). Anti-aliasing (where lines/curves are made to appear smoother by using intermediate color values) could also be applied to the line, rectangle, text, oval, polygon and pencil tools.	Another aspected in which the program could be improved is in the opening of icons. If the user has a file with no icon resources, the program (in its current state) complains that the file cannot be opened. However the file still has an icon associated with it, either the document icon of the program that made it, or the unknown document icon if the creator is unknown. It should be possible to obtain the requested icon from the Desktop Icon Database, and open that up for editing.	Finally a drawing mode could be implemented wherein the current tool affects both the icon and the mask. So when the user draws with the pencil, not only are the respective pixels in the icon changed, but also the pixels are turned on in the mask (so that the icon data will be displayed). Since some users might not like this a mode in which this option is off will be provided. A possible respresentation of this would be to have a little chain which "links" the icon and mask displays on the right side.	The main change from a programmer's viewpoint would be to separate the icnsEditorClass into a generic editorClass from which the icnsEditorClass is derrived. Then the base editing code could be shared with other editors, and if for example I wished to make a cursor editor I could simply derrive a cursorEditorClass, and have the base code shared so that when I add another feature to the base class both editors gain it automatically.	If the editorClass concept is implemented, then it should be possible to do an application which can edit all kinds of resources. The editorClass class could be used for the various graphical ones (icons and cursors as mentioned, but also pictures and 'cicn's, icons of arbitrary size). Other classes could be made for editing dialog, window, and control resources.	The current error handling mechanism could also be improved. Right I communnicate errors (such as outOfMemory) through the status variable in each class. However C++ provides a mechanism for dealing with these kinds of situations, exceptions. Unfortunately I did not have the time to learn how to use them, but nothing prevents me from attempting to use them in a future version.	Finally, I could take the object oriented design a step further, and use objects for all aspects of the program, not just the editor class. Most likely this would mean switching to an application framework (such as PowerPlant) which provides a certain number of base classes, from which you can derrive your own custom made ones.