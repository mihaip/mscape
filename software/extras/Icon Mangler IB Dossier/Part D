TestingThe testing for this program is rather easy. Since it uses a Graphical User Interface, it is much easier to handle user input. Unlike text-based programs, in which the input must be made sure to be valid, I can ensure that by handling clicks only when they are in a legal spot (within a control), and by disabling commands (menus, buttons) which are not appropriate at the moment. Therefore the testing will focus more on errors which are not directly caused by user (like low-memory situations), as well as on normal operation (creating a new icon, opening an existing one and working with other programs).It should be noted that this is not the only testing that the program went. As features were being implemented, they were tested. It would be foolish to expect to be able to implement everything at once, and then compile the application and have everything run perfectly. The kind of testing done now is "integration testing", to see that all the functions are working well together (as opposed to the earlier testing where it was focused on a specific one, eg. after implementing a tool, only that tool was tested). It is important to realize that this is the same way the the program will be used (since the user isn't very likely to use just one function) and thus this method is very appropriate for the final testing. Also, this program was run by several "beta testers" who had no previous experience with it, and it performed as expected (that is it did its job).NEW ICON FROM SCRATCHWhen testing normal operation the main goal will be to use as many of the tools as possible. The first test will be to make an icon from scratch, and to use as many of the tools as possible. The end result should be an icon which can be displayed in the Finder or on the desktop.LOW MEMORY CONDITIONSWhen testing under low memory conditions, a large number of editors will be created (12 in this case) so that if the user attempts to make any more, then application will run out of memory. Ideally, Icon Mangler should show an error message stating the reason why a new editor could not be created. Also in this category we are testing how Icon Mangler behaves when it runs out of memory while an icon is being edited. The set-up here is to again have a large number of editors open (10 in this case) and to open another icon, and start editing it. Eventually Icon Mangler will run out of memory, since we are saving the drawing states as we go along (for the multiple-undo support). When this happens, Icon Mangler should present a warning message, and dispose of the saved states in order to free some memory. After this is done we will use up the remaining memory by drawing in another editor, and then return to the initial editor and attempt to do some more editing. When this happens, Icon Mangler should again attempt to deal with the situation. Since we have already disposed of the states, we have no alternative but to close the editor. Icon Mangler should inform the user of this, and provide him with an opportunity to save (if he wants to of course).OPENING ICONSWe will also test how Icon Mangler handles the opening of files. Basically we can open three kinds of files; with one icon resource, with several icon resources and with no icon resources. In the first case the single resource should be opened automatically. The Icon Browser should show up in the second case, and allow the user to choose an icon. In the final case Icon Mangler should reject the file, since there is nothing to edit in it.WORKING WITH OTHER PROGRAMSFinally we will see how well Icon Mangler operates with other programs. The main method of transferring data from other graphics applications is through drag-and-drop. As its name implies, in this method the user can drag from one program the wanted image into Icon Mangler (either into the drawing area or into one of the slots in the display). If the image is dropped into the drawing area, it should be put into a floating selection, otherwise it should be merged with the existing contents.